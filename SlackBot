# -*- coding: utf-8 -*-

import os
import time
import re
from slackclient import SlackClient
from pathlib import Path


# instantiate Slack client
slack_client = SlackClient(os.environ.get('SLACK_BOT_TOKEN'))
# starterbot's user ID in Slack: value is assigned after the bot starts up
starterbot_id = None

# constants
output_folder=Path("H:/Digital/CRM/eCRM/Sander/Fontem/")
RTM_READ_DELAY = 1 # 1 second delay between reading from RTM

TEXT_COMMAND1 = "text_test"
TEXT_COMMAND2 = "text_caps"
TEXT_COMMAND3 = "text_lol"
FILE_COMMAND1 = "file_send"

MENTION_REGEX = "^<@(|[WU].+?)>(.*)"

def parse_bot_commands(slack_events):
    """
        Parses a list of events coming from the Slack RTM API to find bot commands.
        If a bot command is found, this function returns a tuple of command and channel.
        If its not found, then this function returns None, None.
    """
    for event in slack_events:
        if event["type"] == "message" and not "subtype" in event:
            user_id, message = parse_direct_mention(event["text"]) #matches message according to regex
            if user_id == starterbot_id:
                return message, event["channel"]
    return None, None


def parse_direct_mention(message_text):
    """
        Finds a direct mention (a mention that is at the beginning) in message text
        and returns the user ID which was mentioned. If there is no direct mention, returns None
    """
    matches = re.search(MENTION_REGEX, message_text)
    # the first group contains the username, the second group contains the remaining message
    return (matches.group(1), matches.group(2).strip()) if matches else (None, None)

def handle_command(command, channel):
    """
        Executes bot command if the command is known
    """
    # Default response is help text for the user
    default_response = "Not sure what you mean."
    file_response='File included'
    # Finds and executes the given command, filling in response
    response = None
    # This is where you start to implement more commands!
    
    
    if command.startswith('text'):
        if command==TEXT_COMMAND1:
            response = "Sure...write some more code then I can do that!" 
        if command.startswith(TEXT_COMMAND2):
            response = command[len(TEXT_COMMAND2):].upper()
        if command==TEXT_COMMAND3:
            response = "lol"        
            
        # Sends the response back to the channel
        slack_client.api_call(
            "chat.postMessage",
            channel=channel,
            text=response or default_response
        )
     
    if command.startswith('file'):    
        if command==FILE_COMMAND1:
            slack_client.api_call(
            "files.upload",
            filename='test.csv',
            channels=channel,
            initial_comments=file_response,
            file=open(output_folder / 'test.csv', 'r').read()     
            )

        

if __name__ == "__main__":
    if slack_client.rtm_connect(with_team_state=False):
        print("Starter Bot connected and running!")
        # Read bot's user ID by calling Web API method `auth.test`
        starterbot_id = slack_client.api_call("auth.test")["user_id"]
        while True:
            #print(slack_client.rtm_read())
            command, channel = parse_bot_commands(slack_client.rtm_read()) #This gets all slack messages and verifies if its a bot command through the parse_bot_commands function
            if command:
                handle_command(command.lower(), channel)
            time.sleep(RTM_READ_DELAY)
    else:
        print("Connection failed. Exception traceback printed above.")
        
